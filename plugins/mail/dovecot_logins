#!@@PERL@@
# -*- perl -*-

=head1 NAME

dovecot - plugin to monitor the dovecot mail server logins

=head1 APPLICABLE SYSTEMS

Hosts running dovecot

=head1 CONFIGURATION

Configuration parameters for @@CONFDIR@@/dovecot,
if you need to override the defaults below:

 [dovecot]
  env.logdir  - Which logfile to use
  env.logfile - What file to read in logdir

=head2 DEFAULT CONFIGURATION

 [dovecot]
  env.logdir  /var/log
  env.logfile mail.log

=head1 AUTHOR

Claudius Herder

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

=begin comment

These magic markers are used by munin-node-configure when installing
munin-node.

=end comment

 #%# family=auto
 #%# capabilities=autoconf

=cut

use strict;
use warnings;

use Munin::Plugin;

my $LOGDIR  = (defined($ENV{'logdir'}) ? $ENV{'logdir'} : '/var/log');
my $LOGFILE = (defined($ENV{'logdir'}) ? $ENV{'logfile'} : 'mail.info');

my $logfile = "$LOGDIR/$LOGFILE";

if ( defined($ARGV[0]) and $ARGV[0] eq "autoconf" )
{
    if (-d $LOGDIR)
    {
        if (-f $logfile)
        {
            if (-r $logfile)
            {
                print "yes\n";
                exit 0;
            }
            else
            {
                print "no (logfile '$logfile' not readable)\n";
            }
        }
        else
        {
            print "no (logfile '$logfile' not found)\n";
        }
    }
    else
    {
        print "no (could not find logdir '$LOGDIR')\n";
    }

    exit 0;
}

my @state = restore_state();

my $pos = shift @state;

my $startsize = (stat $logfile)[7];
$pos = $startsize unless defined($pos);

my %logins = @state;

if (! -f $logfile) 
{
    foreach my $i (sort keys %logins)
    {
        print "$i.value U\n";
    }
    exit 0;
}

if ( $ARGV[0] and $ARGV[0] eq "config" )
{
    print "graph_title dovecot logins\n";
    print "graph_vlabel logins / \${graph_period}\n";
    print "graph_category dovecot\n";
    print "graph_scale no\n";
    print "graph_args --base 1000 -l 0\n";
    print "graph_period minute\n";
    print "graph_total total\n";

    foreach my $i (sort keys %logins)
    {
        print "$i.label $i\n";
        print "$i.type DERIVE\n";
        print "$i.info Number of $i logins\n";
    }
    exit 0;
}

$pos = parseLogfile($logfile, $pos, $startsize);

foreach my $i (sort keys %logins)
{
    print "$i.value $logins{$i}\n";
}

save_state($pos, %logins);

sub parseLogfile 
{    
    my ($fname, $start, $stop) = @_;

    my ($logfd, $reset) = tail_open($fname, $start);

    while (tell($logfd) < $stop) 
    {
        my $line = <$logfd>;
        chomp ($line);

        if($line =~ /dovecot/) 
        {
            if($line =~ /imap-login: Login:/)
            {
                if($line =~ /secured/)
                {
                    $logins{imap_secured}++;
                }
                elsif($line =~ /SSL/) 
                {
                    $logins{imap_ssl}++;
                }
                elsif($line =~ /TLS/)
                {
                    $logins{imap_tls}++;
                }
                else 
                {
                    $logins{imap}++;
                }
            }
            elsif($line =~ /pop3-login: Login:/)
            {
                if($line =~ /secured/)
                {
                    $logins{pop3_secured}++;
                }
                elsif($line =~ /SSL/)
                {
                    $logins{pop3_ssl}++;
                }
                elsif($line =~ /TLS/)
                {
                    $logins{pop3_tls}++;
                }
                else
                {
                    $logins{pop3}++;
                }
            }
            elsif($line =~ /managesieve-login: Login:/)
            {
                if($line =~ /secured/)
                {
                    $logins{sieve_secured}++;
                }
                elsif($line =~ /SSL/)
                {
                    $logins{sieve_ssl}++;
                }
                elsif($line =~ /TLS/)
                {
                    $logins{sieve_tls}++;
                }
                else
                {
                    $logins{sieve}++;
                }
            }
        }
    }
    return tail_close($logfd);
}

# vim:syntax=perl
