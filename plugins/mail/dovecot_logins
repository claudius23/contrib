#!@@PERL@@
# -*- perl -*-

=head1 NAME

dovecot - plugin to monitor the dovecot mail server logins

=head1 APPLICABLE SYSTEMS

Hosts running dovecot

=head1 CONFIGURATION

Configuration parameters for @@CONFDIR@@/dovecot,
if you need to override the defaults below:

 [dovecot]
  env.logdir  - Which logfile to use
  env.logfile - What file to read in logdir

=head2 DEFAULT CONFIGURATION

 [dovecot]
  env.logdir  /var/log
  env.logfile mail.log

=head1 AUTHOR

Claudius Herder

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

=begin comment

These magic markers are used by munin-node-configure when installing
munin-node.

=end comment

 #%# family=auto
 #%# capabilities=autoconf

=cut

use strict;
use warnings;

use Munin::Plugin;

my $LOGDIR  = (defined($ENV{'logdir'}) ? $ENV{'logdir'} : '/var/log');
my $LOGFILE = (defined($ENV{'logdir'}) ? $ENV{'logfile'} : 'mail.info');

my $logfile = "$LOGDIR/$LOGFILE";

if ( defined($ARGV[0]) and $ARGV[0] eq "autoconf" )
{
    if (-d $LOGDIR)
    {
        if (-f $logfile)
        {
            if (-r $logfile)
            {
                print "yes\n";
                exit 0;
            }
            else
            {
                print "no (logfile '$logfile' not readable)\n";
            }
        }
        else
        {
            print "no (logfile '$logfile' not found)\n";
        }
    }
    else
    {
        print "no (could not find logdir '$LOGDIR')\n";
    }

    exit 0;
}

if ( $ARGV[0] and $ARGV[0] eq "config" )
{
    print "graph_title dovecot logins\n";
    print "graph_vlabel logins / \${graph_period}\n";
    print "graph_category dovecot\n";
    print "graph_scale no\n";
    print "graph_args --base 1000 -l 0\n";
    print "graph_period minute\n";
    print "graph_total total\n";

    print "imap.label imap\n";
    print "imap.type DERIVE\n";
    print "imap.info Number of unencrypted imap logins\n";
    print "imap_secured.label imap secured\n";
    print "imap_secured.type DERIVE\n";
    print "imap_secured.info Number of imap secured logins\n";
    print "imap_ssl.label imap SSL\n";
    print "imap_ssl.type DERIVE\n";
    print "imap_ssl.info Number of imap SSL logins\n";
    print "imap_tls.label imap TLS\n";
    print "imap_tls.type DERIVE\n";
    print "imap_tls.info Number of imap TLS logins\n";

    print "pop3.label pop3\n";
    print "pop3.type DERIVE\n";
    print "pop3.info Number of unencrypted pop3 logins\n";
    print "pop3_secured.label pop3 secured\n";
    print "pop3_secured.type DERIVE\n";
    print "pop3_secured.info Number of pop3 secured logins\n";
    print "pop3_ssl.label pop3 SSL\n";
    print "pop3_ssl.type DERIVE\n";
    print "pop3_ssl.info Number of pop3 SSL logins\n";
    print "pop3_tls.label pop3 TLS\n";
    print "pop3_tls.type DERIVE\n";
    print "pop3_tls.info Number of pop3 TLS logins\n";

    print "sieve.label sieve\n";
    print "sieve.type DERIVE\n";
    print "sieve.info Number of unencrypted sieve logins\n";
    print "sieve_secured.label sieve secured\n";
    print "sieve_secured.type DERIVE\n";
    print "sieve_secured.info Number of sieve secured logins\n";
    print "sieve_ssl.label sieve SSL\n";
    print "sieve_ssl.type DERIVE\n";
    print "sieve_ssl.info Number of sieve SSL logins\n";
    print "sieve_tls.label sieve TLS\n";
    print "sieve_tls.type DERIVE\n";
    print "sieve_tls.info Number of sieve TLS logins\n";
    exit 0;
}

if (! -f $logfile) 
{
    print "imap.value U\n";
    print "imap_secured.value U\n";
    print "imap_ssl.value U\n";
    print "imap_tls.value U\n";

    print "pop3.value U\n";
    print "pop3_secured.value U\n";
    print "pop3_ssl.value U\n";
    print "pop3_tls.value U\n";

    print "sieve.value U\n";
    print "sieve_secured.value U\n";
    print "sieve_ssl.value U\n";
    print "sieve_tls.value U\n";
    exit 0;
}

my ($pos, $imap, $imap_secured, $imap_ssl, $imap_tls,
    $pop3, $pop3_secured, $pop3_ssl, $pop3_tls,
    $sieve, $sieve_secured, $sieve_ssl, $sieve_tls) = restore_state();

$imap = 0 unless defined($imap);
$imap_secured = 0 unless defined($imap_secured);
$imap_ssl = 0 unless defined($imap_ssl);
$imap_tls = 0 unless defined($imap_tls);

$pop3 = 0 unless defined($pop3);
$pop3_secured = 0 unless defined($pop3_secured);
$pop3_ssl = 0 unless defined($pop3_ssl);
$pop3_tls = 0 unless defined($pop3_tls);

$sieve = 0 unless defined($sieve);
$sieve_secured = 0 unless defined($sieve_secured);
$sieve_ssl = 0 unless defined($sieve_ssl);
$sieve_tls = 0 unless defined($sieve_tls);

my $startsize = (stat $logfile)[7];

if (!defined $pos)
{
    # Initial run.
    $pos = $startsize;
}

$pos = parseLogfile($logfile, $pos, $startsize);

print "imap.value $imap\n";
print "imap_secured.value $imap_secured\n";
print "imap_ssl.value $imap_ssl\n";
print "imap_tls.value $imap_tls\n";

print "pop3.value $pop3\n";
print "pop3_secured.value $pop3_secured\n";
print "pop3_ssl.value $pop3_ssl\n";
print "pop3_tls.value $pop3_tls\n";

print "sieve.value $sieve\n";
print "sieve_secured.value $sieve_secured\n";
print "sieve_ssl.value $sieve_ssl\n";
print "sieve_tls.value $sieve_tls\n";

save_state($pos, $imap, $imap_secured, $imap_ssl, $imap_tls,
    $pop3, $pop3_secured, $pop3_ssl, $pop3_tls,
    $sieve, $sieve_secured, $sieve_ssl, $sieve_tls);

sub parseLogfile 
{    
    my ($fname, $start, $stop) = @_;

    my ($logfd, $reset) = tail_open($fname, $start);

    while (tell($logfd) < $stop) 
    {
        my $line = <$logfd>;
        chomp ($line);

        if($line =~ /dovecot/) 
        {
            if($line =~ /imap-login: Login:/)
            {
                if($line =~ /secured/)
                {
                    $imap_secured++;
                }
                elsif($line =~ /SSL/) 
                {
                    $imap_ssl++;
                }
                elsif($line =~ /TLS/)
                {
                    $imap_tls++;
                }
                else 
                {
                    $imap++;
                }
            }
            elsif($line =~ /pop3-login: Login:/)
            {
                if($line =~ /secured/)
                {
                    $pop3_secured++;
                }
                elsif($line =~ /SSL/)
                {
                    $pop3_ssl++;
                }
                elsif($line =~ /TLS/)
                {
                    $pop3_tls++;
                }
                else
                {
                    $pop3++;
                }
            }
            elsif($line =~ /managesieve-login: Login:/)
            {
                if($line =~ /secured/)
                {
                    $sieve_secured++;
                }
                elsif($line =~ /SSL/)
                {
                    $sieve_ssl++;
                }
                elsif($line =~ /TLS/)
                {
                    $sieve_tls++;
                }
                else
                {
                    $sieve++;
                }
            }
        }
    }
    return tail_close($logfd);
}

# vim:syntax=perl
