#!@@PERL@@
# -*- perl -*-

=head1 NAME

dovecot - plugin to monitor the dovecot mail server
currently connected users

=head1 APPLICABLE SYSTEMS

Hosts running dovecot

=head1 CONFIGURATION

Configuration parameters for @@CONFDIR@@/dovecot,
if you need to override the defaults below:

 [dovecot]
  env.logdir  - Which logfile to use
  env.logfile - What file to read in logdir

=head2 DEFAULT CONFIGURATION

 [dovecot]
  env.logdir  /var/log
  env.logfile mail.log

=head1 AUTHOR

Claudius Herder

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

=begin comment

These magic markers are used by munin-node-configure when installing
munin-node.

=end comment

 #%# family=auto
 #%# capabilities=autoconf

=cut

use strict;
use warnings;

use Munin::Plugin;

my $LOGDIR  = (defined($ENV{'logdir'}) ? $ENV{'logdir'} : '/var/log');
my $LOGFILE = (defined($ENV{'logdir'}) ? $ENV{'logfile'} : 'mail.info');

my $logfile = "$LOGDIR/$LOGFILE";

if ( defined($ARGV[0]) and $ARGV[0] eq "autoconf" )
{
    if (-d $LOGDIR)
    {
        if (-f $logfile)
        {
            if (-r $logfile)
            {
                print "yes\n";
                exit 0;
            }
            else
            {
                print "no (logfile '$logfile' not readable)\n";
            }
        }
        else
        {
            print "no (logfile '$logfile' not found)\n";
        }
    }
    else
    {
        print "no (could not find logdir '$LOGDIR')\n";
    }

    exit 0;
}

if ( $ARGV[0] and $ARGV[0] eq "config" )
{
    print "graph_title dovecot connected users\n";
    print "graph_vlabel users / \${graph_period}\n";
    print "graph_category dovecot\n";
    print "graph_scale no\n";
    print "graph_args --base 1000 -l 0\n";
    print "graph_period minute\n";

    print "connected.label connected users\n";
    print "connected.type GAUGE\n";
    print "connected.info Number of users curently connected\n";
    exit 0;
}

if (! -f $logfile) 
{
    print "connected.value U\n";
    exit 0;
}

my ($pos, $disconnects, $logins) = restore_state();

$disconnects = 0 unless defined($disconnects);
$logins = 0 unless defined($logins);

my $startsize = (stat $logfile)[7];

if (!defined $pos)
{
    # Initial run.
    $pos = $startsize;
}

$pos = parseLogfile($logfile, $pos, $startsize);

if($logins < $disconnects)
{
    $disconnects = $logins;
}
my $connected = $logins - $disconnects;

print "connected.value $connected\n";

save_state($pos, $disconnects, $logins);

sub parseLogfile 
{    
    my ($fname, $start, $stop) = @_;

    my ($logfd, $reset) = tail_open($fname, $start);

    while (tell($logfd) < $stop) 
    {
        my $line = <$logfd>;
        chomp ($line);

        if($line =~ /dovecot/i) 
        {
            if($line =~ /Login/i)
            {
                $logins++;

            }
            elsif($line =~ /Disconnected/i)
            {
                $disconnects++;
            }
        }
    }
    return tail_close($logfd);
}

# vim:syntax=perl
